#
# Copyright (c) 2024, Auterion AG
# All rights reserved.
#

name: Build and publish debian package for ROS package
on:
  workflow_call:
    inputs:
      platform:
        type: string
        description: 'Platform to build for (e.g. linux/amd64 or linux/arm64)'
        required: true
      ubuntu-distro:
        type: string
        description: 'Ubuntu distribution to build for (e.g. focal)'
        required: true
      ros2-distro:
        type: string
        description: 'ROS distribution to build for (e.g. humble)'
        required: true
      source-prefix:
        type: string
        description: 'Prefix of the source directory for the package'
        default: '.'
      runner:
        description: "Runner; For example: ubuntu-latest"
        required: false
        type: string
        default: 'ubuntu-latest'
      cloudsmith-stage:
        description: "stage package to cloudsmith on PRs"
        required: false
        type: boolean
        default: false

jobs:
  build-and-publish:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set release version in package.xml, if building release
        if: ${{ github.event_name == 'release' }}
        run: |
          SANTIZED_VERSION=$(echo ${{ github.event.release.tag_name }} | sed 's/-/\~/g')
          sed -i "s/<version>.*<\/version>/<version>$SANTIZED_VERSION<\/version>/" ${{ inputs.source-prefix }}/package.xml
      - name: Set release version in package.xml, if building from PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          cd ${{ inputs.source-prefix }} && SANTIZED_VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.1")-$(git rev-parse --short HEAD)
          echo $SANITIZED_VERSION
          cat ${{ inputs.source-prefix }}/package.xml
          sed -i "s/\(<version>\)\(.*\)\(<\/version>\)/\1\2+$SANITIZED_VERSION\3/" ${{ inputs.source-prefix }}/package.xml
      
      - name: Checkout workflow repo
        uses: actions/checkout@v2
        with:
          repository: auterion/ros-debian-workflow
          path: ros-debian-workflow

      - name: Build build environment
        working-directory: ros-debian-workflow
        run: |
          docker build . -f Dockerfile.debian-buildenv \
            --platform ${{ inputs.platform }} \
            --build-arg="ROS2_DISTRO=${{ inputs.ros2-distro }}" \
            --build-arg="UBUNTU_DISTRO=${{ inputs.ubuntu-distro }}" \
            -t buildenv:current

      - name: Build debian package
        run: |
          docker run --rm -v $(pwd)/${{ inputs.source-prefix }}:/work --platform ${{ inputs.platform }} buildenv:current

      - name: Generate artifact name
        run: |
          # remove forward slashes from platform name
          platform_name="${{ inputs.platform }}"
          platform_name="${platform_name//\//-}"
          echo "ARTIFACT_NAME=debian-packages_${platform_name}_${{ inputs.ubuntu-distro }}_${{ inputs.ros2-distro }}_${{ inputs.runner }}" >> $GITHUB_ENV

      - name: Upload artifacts to github actions/checkout
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.source-prefix }}/output/*.deb
      
      - name: Generate upload information
        run: |
          echo "DEBIAN_PACKAGE=$(ls ${{ inputs.source-prefix }}/output/ | grep '\.deb')" >> $GITHUB_ENV

      - run: |
          echo "DEBIAN PACKAGE FILE: ${{ env.DEBIAN_PACKAGE }}"

      - name: Push package to cloudsmith
        if: ${{ github.event_name == 'release' }}
        uses: cloudsmith-io/action@v0.5.4
        with:
          api-key: ${{ secrets.AUTERION_CI_CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'deb'
          owner: auterion
          repo: public
          distro: ubuntu
          release: ${{ inputs.ubuntu-distro }}
          file: ${{ inputs.source-prefix }}/output/${{ env.DEBIAN_PACKAGE }}

      - name: Stage package to cloudsmith
        if: ${{ github.event_name == 'pull_request' && inputs.cloudsmith-stage == true }}
        uses: cloudsmith-io/action@v0.5.4
        with:
          api-key: ${{ secrets.AUTERION_CI_CLOUDSMITH_API_KEY }}
          command: 'push'
          format: 'deb'
          owner: auterion
          repo: staging
          distro: ubuntu
          release: ${{ inputs.ubuntu-distro }}
          file: ${{ inputs.source-prefix }}/output/${{ env.DEBIAN_PACKAGE }}

